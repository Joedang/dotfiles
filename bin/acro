#!/bin/bash
# A tool for looking up and recording acronyms
# Joe Shields
# 2019-05-18

# exit codes:
EXIT_GOOD=0    # normal operation
EXIT_NO_ACRO=1 # acronym not found
EXIT_NO_COMM=2 # command not found
EXIT_OOPS=3    # unanticipated error

# abort if you get errors
set -e

acroDir=$HOME/notes/acronyms
KNOWNFILE=$acroDir/known.txt
UNKNOWNFILE=$acroDir/unknown.txt
VERBOSITY=0

function acro-find() {
# Run acro-sfind, but provide some explanation of the error codes.
	acro-sfind $@
    ret=$?
	if [ "$ret" -eq "$EXIT_GOOD" ]; then
		return $ret
    elif [ "$ret" -eq "$EXIT_NO_ACRO" ]; then
        echo acronym not found 1>&2
		return $ret
    else 
        echo Oops, something weird happened... 1>&2
        return $ret
	fi
}

function acro-ufind() {
# run acro-sfind on the unknown acronyms.
    acro-sfind $@ $UNKNOWNFILE
}

function acro-sfind() {
# function description
    if [ -z "$2" ]; then
        if [[ $VERBOSITY == 1 ]]; then
            echo no file given, defaulting to $KNOWNFILE 1>&2
        fi
        F=$KNOWNFILE # default to editing the known acronyms
    else
        F="$2"
    fi
	PATTERN=$1
    # case insensitive, lines that start with a string containing $letters, but no colon
	if grep -iPe "^[^:]*?$PATTERN[^:]*?" $F
	then
		return 0
	else
		return 1
	fi
}

function acro-grep() {
# simply pass the args on to grep
    grep $@ $KNOWNFILE $UNKNOWNFILE
}

function acro-known() {
# function description
    sort $KNOWNFILE
}

function acro-unknown() {
# function description
    sort $UNKNOWNFILE
}

function _acro-add() {
# Append the args (assumed to be formatted as an acronym) to a file.
# $1 is the file to add an acronym to.
# The remaining args are the acronym entry.
    F=$1
    shift
    if [ ! -f "$F" ]; then
        mkdir -p `dirname "$F"`
        touch "$F"
    fi
    echo "$@" >> $F
}

function acro-define() {
# Append the args (assumed to be formatted as an acronym) to the known file.
    _acro-add $KNOWNFILE "$@"
    # extract just the acronym
    ACRO=$(grep -iPoe "^[^:]*" <(echo "$@"))
    if [[ $VERBOSITY == 1 ]]; then
        echo defined acronym: $ACRO
    fi

    # check if it needs to be removed from the unknown acronyms
    if grep -i "^$ACRO$" $UNKNOWNFILE 1>&/dev/null; then
        read -p "Found $ACRO in $UNKNOWNFILE. Remove it? (Y/n)" -r REPLY
        if [[ $REPLY == [yY].* ]]; then # replied yes
            REMOVE=yes
        elif [ -z $REPLY ]; then # just hit enter
            REMOVE=yes
        else # unrecognized response
            REMOVE=no
        fi
        if [ "$REMOVE" = 'yes' ]; then
            echo "Removing $ACRO from $UNKNOWNFILE ..."
            sed -i "/^$ACRO$/Id" $UNKNOWNFILE # remove the acronym from the unknown list
        fi
    fi
}

function acro-udefine() {
# Append the args (assumed to be formatted as an acronym) to the unknown file.
    _acro-add $UNKNOWNFILE "$@"
}

function acro-edit() {
# function description
    if [ -z "$EDITOR" ]; then
        E=vim # default to vim
    else
        E=$EDITOR
    fi
    if [ -z "$@" ]; then
        if [[ $VERBOSITY == 1 ]]; then
            echo no file given, defaulting to $KNOWNFILE
        fi
        F=$KNOWNFILE # default to editing the known acronyms
    else
        F="$@"
    fi
    $EDITOR $F
}

function acro-uedit() {
# function description
    acro-edit $UNKNOWNFILE
}

function acro-init() {
# function description
    for F in $KNOWNFILE $UNKNOWNFILE
    do
        if [ ! -f "$F" ]; then # if the file doesn't exist
            mkdir -p `dirname "$F"` # ensure its dir exists
            touch "$F" # create the file
        fi
    done
}

function acro-help() {
# Short explanations of the command and its subcommands
	echo -e usage: \\t acro '<command> [args]'
	echo
	echo lookup and record acronyms
	echo
	echo COMMANDS:
	echo -e 'acro find [PATTERN]'
    echo -e '                Search the known acronyms for PATTERN.'
    echo -e '                This is case insensitive and uses grep in Perl mode.'
    echo -e '                Including a colon (:) in the pattern will give weird results.'
	echo -e 'acro sfind [PATTERN] [FILE]'
	echo -e '                Search the known acronyms for PATTERN with no interactivity.'
	echo -e 'acro sfind [PATTERN]'
	echo -e '                Search the unknown acronyms for PATTERN with no interactivity.'
	echo -e 'acro grep ARGS [...]'
	echo -e '                Pass the ARGS into grep.'
    echo -e 'acro known      List all known acronyms (sorted).'
    echo -e 'acro unknown    List all unknown acronyms (sorted).'
	echo -e "acro define 'ACRO: EXPANSION -- BRIEF'"
	echo -e '                Add an acronym to the known list.'
    echo -e '                ACRO must not contain a colon (:).'
    echo -e '                EXPANSION must contain a colon (:) or a double dash (--).'
    echo -e '                BRIEF must not contain a double dash (--).'
	echo -e 'acro udefine    Add an acronym to the unknown list.'
	echo -e 'acro edit [FILE]'
	echo -e '                Edit the known list with $EDITOR or vim if not defined.'
	echo -e '                Edit FILE if given.'
	echo -e 'acro uedit      Edit the unknown list with $EDITOR or vim if not defined.'
	echo -e 'acro init       Setup the acronyms directory.'
	echo -e 'acro help       Display this help message.'
	echo -e 
	echo -e 'Keep in mind that this is just a weenie Bash script.'
	echo -e 'If you need to do something complicated, it'\''s best to just use `acro edit`.'
	echo -e 'Remember to check out the script itself if you'\''re getting weird behavior.'
	echo -e 'Run `which acro` if you'\'' don'\''t know where it is.'
}

cmd=$1 # grab the first arg
shift # shift the remaining args forward (2 becomes 1, etc.)

#### parse subcommands ####
case $cmd in 
	find)    acro-find    $@ ;;
	ufind)   acro-ufind      ;;
	sfind)   acro-sfind   $@ ;;
    grep)    acro-grep    $@ ;;
	known)   acro-known      ;;
	unknown) acro-unknown    ;;
	define)  acro-define  $@ ;;
	udefine) acro-udefine $@ ;;
    edit)    acro-edit    $@ ;;
    uedit)   acro-uedit      ;;
	init)    acro-init       ;;
	help)    acro-help       ;;
	*)
		echo acro: \'$cmd\' is not a command. Run \'acro help\' for usage. 1>&2
		exit 2
		;;
esac
