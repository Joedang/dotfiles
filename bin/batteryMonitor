#!/usr/bin/env bash
# Send alerts when the battery is low.
# This should probably be started by a window manager or X.
# Joe Shields, 2020-12-16

# parameters
lowPercent=25 # send a low-urgency notification when <= this percent
critPercent=13 # send critical-urgency notifications <= this percent
batDir=/sys/class/power_supply/BAT0 # directory of battery info
delay=60 # seconds between checks
logFile=$HOME/log/batteryMonitor.csv

# initialization
scriptName=${0##*/}
PID_name=$(pgrep -f $scriptName)
capacity_prev=100 # start by assuming the battery is at 100%
# if available, use the built-in sleep instead of the system sleep
[[ -r /usr/lib/bash/sleep ]] && enable -f '/usr/lib/bash/sleep' sleep
echo PID_name is $PID_name
echo BASHPID is $BASHPID
if [[ "$PID_name" != "$BASHPID" ]];then # this is not the only instance of this script running
    dunstify -u low "It looks like $scriptName is already running." "PID: $PID_name"
    exit 1
fi
echo script not yet started. continuing...
ID=$(dunstify -u low -p "battery monitor started")
sleep 5 # leave some time for the notification to be viewed
# main loop
while :
do
    #capacity=$(cat "$batDir"/capacity)
    read capacity < "$batDir/capacity" # read contents using built-ins to avoid process proliferation
    #batStatus=$(cat "$batDir"/status)
    read batStatus < "$batDir/status"
    #charge_now=$(cat "$batDir"/charge_now)
    read charge_now < "$batDir/charge_now"
    #printf "capacity: "$capacity"%%\n"
    if (( capacity < capacity_prev ));then #
        sign=-1
        if (( capacity <= critPercent ));then
            dunstify -u critical -t 0 -r "$ID" "Critically Low Battery: $capacity%"
            # piping into `play` makes sure this isn't blocked by existing audio sources
            flite -t "Criticallly low battery: $capacity%" -o /dev/stdout | play --volume 6 -
            urgency=2
        elif (( capacity <= lowPercent ));then
            dunstify -u low -t 0 -r "$ID" "Low Battery: $capacity%"
            flite -t "Low battery: $capacity%" -o /dev/stdout | play --volume 4 -
            urgency=1
        else
            urgency=0
        fi
    elif (( capacity == capacity_prev ));then
        sign=0
    else 
        sign=1
    fi
    echo "$EPOCHSECONDS,$capacity,$capacity_prev,$charge_now,$sign,$urgency,$batStatus" >> "$logFile"
    capacity_prev="$capacity"
    sleep "$delay"
done
echo exited the loop somehow...
exit -1
