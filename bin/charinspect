#!/usr/bin/env bash
# examine some directly-typed characters
# This captures characters from the read built-in and reports their:
# escape code, octal value, decimal value, hexidecimal value, unicode name, unicode meaning,
# and literal appearance (highlighted between single quotes.)
# Joe Shields, 2021-01-04

dataUrl=https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt
dataLocation="$HOME/.local/share/UnicodeData.txt"
{
    if [[ ! -f "$dataLocation" ]];then # if the data file doesn't exist yet
        echo -e "The Unicode data file has not been downloaded yet.\nDownloading to $dataLocation" 
        mkdir -p "${dataLocation%/*}" # ensure the directory exists
        curl "$dataUrl" > "$dataLocation" # download the file
    fi
} 1>&2 # send all this block's output to stderr


# Don't strip whitespace (IFS); break lines on null bytes instead of newlines (-d).
IFS='' read -r -d '' -p 'Send NULL (usually Ctrl+2) to terminate.'$'\n''Type some characters to examine: ' chars
echo
KEY_HL=$'\e[1;30;106m' # style to highlight literals
RST=$'\e[0m' # reset styling
len=${#chars}
for (( i=0; i<len; ++i )); do # step through each character
    literal="${chars: $i:1}"
    IFS=';' read -ra unicodeData <<< "$(grep -io $(printf '^0*%x;.*' "'$literal") "$dataLocation")" # lookup by hex value
    declare -i int=$(printf '%d' "'$literal")
    binary='' # conversion into binary representation
    while (( int ));do # until int is zero
        binary=$(( int & 1 ))$binary # prepend the least bit
        (( int >>= 1 )) # shift all the bits one lower
    done
    name="${unicodeData[1]}" # second field is the name
    meaning="${unicodeData[10]}" # 11th field is the meaning
    echo    "-------------------- character $(( i+1 )) of $len -----"
    printf  "                     escaped: %q\n"   "$literal"
    echo    "                      binary: $binary"
    printf  '                       octal: 0%o\n'  "'$literal" # the apostrophe signals printf to use the numeric value
    printf  '                     decimal: %d\n'   "'$literal"
    printf  '                 hexidecimal: 0x%x\n' "'$literal"
    echo    "                unicode name: $name"
    echo    "             unicode meaning: $meaning"
    echo    "highlighted in double braces: {{$KEY_HL${literal}$RST}}"
    #echo   "unicode data: ${unicodeData[@]}"
    echo
done
echo 'Done: `read` encountered a null byte.'
exit 0
