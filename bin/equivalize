#!/usr/bin/env bash
# Replace standard ASCII characters with Unicode look-alikes.
# vim: foldmethod=marker:
# Joe Shields, 2021-01-10

## I generated the namePatterns and except_exclude arrays manually, but these snippets made it easier. {{{
## Generate an array that you can type the human-readable names into. (You'll need to manually escape stuff like " ' `)
#for dec in 9 {32..126};do # list the printable ascii characters (including tab)
#    oct=$(printf '\\%o' "$dec") # convert decimal representation to octal escape
#    printf "[\"$oct\"]=\"$oct\"\n"
#done
#for dec in 9 {32..126};do # print the Unicode names of the ASCII characters
#    #hex=$(printf '\\U%0*x' 8 "$dec")
#    hex=$(printf '%0*x' 4 "$dec")
#    grep -i "^[^;]*$hex;" ~/.local/share/UnicodeData.txt | head -n 1
#done
# }}}

# parameters {{{
equivFile="$HOME/.local/share/UnicodeEquivalents.txt"
dataUrl=https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt
dataLocation="$HOME/.local/share/UnicodeData.txt"
helpText="Usage: ${0##*/} [OPTIONS] [TEXT ...]

Replace standard ASCII characters with random Unicode look-alikes.

Options:
    -g  Generate (or regenerate) the list of look-alike characters.
    -h  Display this help text.

If no TEXT is in the arguments, characters will be read from stdin.
So, this command may be used in a pipeline.

If the UnicodeData.txt file or the list of look-alike characters are not present,
they will be downloaded or generated, respectively.

The effect yields very stylized 'cursed' text. If you want something more subtle, 
an easy solution would be to remove the extravagant characters from the
look-alike file. (The first character of every line is the ASCII character, the
remaining characters are the look-alikes.) Of course, you can also tweak the 
patterns and exceptions used to generate that file.  "
# }}}

declare -A namePatterns=( # {{{
# The patterns are used to search in the Unicode data file when generating visual equivalents.
# They identify candidates for look-alike characters.
['0020']='SPACE'                    # " "
['0021']='EXCLAMATION'              # "!"
['0022']='DOUBLE.*QUOTATION'        # """
['0023']='NUMBER SIGN'              # "#"
['0024']='DOLLAR SIGN'              # "$"
['0025']='PERCENT SIGN'             # "%"
['0026']='AMPERSAND'                # "&"
['0027']='APOSTROPHE'               # "'"
['0028']='LEFT PARENTHESIS'         # "("
['0029']='RIGHT PARENTHESIS'        # ")"
['002A']='ASTERISK'                 # "*"
['002B']='PLUS SIGN'                # "+"
['002C']='COMMA'                    # ","
['002D']='HYPHEN-MINUS'             # "-"
['002E']='FULL STOP'                # "."
['002F']='SOLIDUS'                  # "/"
['0030']='DIGIT ZERO'               # "0"
['0031']='DIGIT ONE'                # "1"
['0032']='DIGIT TWO'                # "2"
['0033']='DIGIT THREE'              # "3"
['0034']='DIGIT FOUR'               # "4"
['0035']='DIGIT FIVE'               # "5"
['0036']='DIGIT SIX'                # "6"
['0037']='DIGIT SEVEN'              # "7"
['0038']='DIGIT EIGHT'              # "8"
['0039']='DIGIT NINE'               # "9"
['003A']='[ ;]COLON'                # ":"
['003B']='SEMICOLON'                # ";"
['003C']='LESS-THAN SIGN'           # "<"
['003D']='EQUALS SIGN'              # "="
['003E']='GREATER-THAN SIGN'        # ">"
['003F']='QUESTION MARK'            # "?"
['0040']='COMMERCIAL AT'            # "@"
['0041']='CAPITAL LETTER A[ ;]'     # "A"
['0042']='CAPITAL LETTER B[ ;]'     # "B"
['0043']='CAPITAL LETTER C[ ;]'     # "C"
['0044']='CAPITAL LETTER D[ ;]'     # "D"
['0045']='CAPITAL LETTER E[ ;]'     # "E"
['0046']='CAPITAL LETTER F[ ;]'     # "F"
['0047']='CAPITAL LETTER G[ ;]'     # "G"
['0048']='CAPITAL LETTER H[ ;]'     # "H"
['0049']='CAPITAL LETTER I[ ;]'     # "I"
['004A']='CAPITAL LETTER J[ ;]'     # "J"
['004B']='CAPITAL LETTER K[ ;]'     # "K"
['004C']='CAPITAL LETTER L[ ;]'     # "L"
['004D']='CAPITAL LETTER M[ ;]'     # "M"
['004E']='CAPITAL LETTER N[ ;]'     # "N"
['004F']='CAPITAL LETTER O[ ;]'     # "O"
['0050']='CAPITAL LETTER P[ ;]'     # "P"
['0051']='CAPITAL LETTER Q[ ;]'     # "Q"
['0052']='CAPITAL LETTER R[ ;]'     # "R"
['0053']='CAPITAL LETTER S[ ;]'     # "S"
['0054']='CAPITAL LETTER T[ ;]'     # "T"
['0055']='CAPITAL LETTER U[ ;]'     # "U"
['0056']='CAPITAL LETTER V[ ;]'     # "V"
['0057']='CAPITAL LETTER W[ ;]'     # "W"
['0058']='CAPITAL LETTER X[ ;]'     # "X"
['0059']='CAPITAL LETTER Y[ ;]'     # "Y"
['005A']='CAPITAL LETTER Z[ ;]'     # "Z"
['005B']='LEFT SQUARE BRACKET'      # "["
['005C']='REVERSE SOLIDUS'          # "\"
['005D']='RIGHT SQUARE BRACKET'     # "]"
['005E']='CIRCUMFLEX ACCENT'        # "^"
['005F']='LOW LINE'                 # "_"
['0060']='GRAVE ACCENT'             # "`"
['0061']='SMALL LETTER A[ ;]'       # "a"
['0062']='SMALL LETTER B[ ;]'       # "b"
['0063']='SMALL LETTER C[ ;]'       # "c"
['0064']='SMALL LETTER D[ ;]'       # "d"
['0065']='SMALL LETTER E[ ;]'       # "e"
['0066']='SMALL LETTER F[ ;]'       # "f"
['0067']='SMALL LETTER G[ ;]'       # "g"
['0068']='SMALL LETTER H[ ;]'       # "h"
['0069']='SMALL LETTER I[ ;]'       # "i"
['006A']='SMALL LETTER J[ ;]'       # "j"
['006B']='SMALL LETTER K[ ;]'       # "k"
['006C']='SMALL LETTER L[ ;]'       # "l"
['006D']='SMALL LETTER M[ ;]'       # "m"
['006E']='SMALL LETTER N[ ;]'       # "n"
['006F']='SMALL LETTER O[ ;]'       # "o"
['0070']='SMALL LETTER P[ ;]'       # "p"
['0071']='SMALL LETTER Q[ ;]'       # "q"
['0072']='SMALL LETTER R[ ;]'       # "r"
['0073']='SMALL LETTER S[ ;]'       # "s"
['0074']='SMALL LETTER T[ ;]'       # "t"
['0075']='SMALL LETTER U[ ;]'       # "u"
['0076']='SMALL LETTER V[ ;]'       # "v"
['0077']='SMALL LETTER W[ ;]'       # "w"
['0078']='SMALL LETTER X[ ;]'       # "x"
['0079']='SMALL LETTER Y[ ;]'       # "y"
['007A']='SMALL LETTER Z[ ;]'       # "z"
['007B']='LEFT CURLY BRACKET'       # "{"
['007C']='VERTICAL LINE'            # "|"
['007D']='RIGHT CURLY BRACKET'      # "}"
['007E']='TILDE'                    # "~"
) # }}}
declare -A except_exclude=(  # {{{
# These are exceptions that pass the name patterns but don't look like the ASCII characters.
# They are excluded from the list of look-alikes when generating visual equivalents.
['0020']='፡ ␈␠〿𝙰𝙱𝙲𝙳𝙴𝙵𝙶𝙷𝙸𝙹𝙺𝙻𝙼𝙽𝙾𝙿𝚀𝚁𝚂𝚃𝚄𝚅𝚆𝚇𝚈𝚉𝚊𝚋𝚌𝚍𝚎𝚏𝚐𝚑𝚒𝚓𝚔𝚕𝚖𝚗𝚘𝚙𝚚𝚛𝚜𝚝𝚞𝚟𝚠𝚡𝚢𝚣𝟶𝟷𝟸𝟹𝟺𝟻𝟼𝟽𝟾𝟿𝩿𝪀'$'\U0008\UE0020' # " "
['0021']='՜߹႟꩷🆙🔛'   # "!"
['0022']='𑿩„❠⹂〝 〟🙸' # """
['0023']='௺𑿩'         # "#"
['0024']='🄏'          # "$"
['0025']=''           # "%"
['0026']='۽'          # ampersand
['0027']='ŉ'          # "'"
['0028']='⎛⎜⎝︵'      # "("
['0029']='⎞⎟⎠︶'      # ")"
['002A']='✢✣✤✥⩮꙳𒋬𒎔'   # "*"
['002B']='⪿⫀﬩⨹'       # "+"
['002C']='ȘșȚțʻʽ՝߸༔፣᠂᠈‘’‛“”‟⍪❛❜❝❞⨩⹉⹌ ꓾꘍꛵Ꜯꜯ︐︑𝪇🄁🄂🄃🄄🄅🄆🄇🄈🄉🄊🙶🙷' # ","
['002D']=''           # "-"
['002E']='։۔።᙮᠃᠉⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛⳹⳾⸼ ꓿꘎꛳︒𖫵𛲟𝪈🄀' # "."
['002F']='\⟈⟉⦸⧵⧷⧹﹨＼🙽' # "/" I'd rather have exceptions for "reverse solidus" characters than enable extended/Perl regex for the big search
['0030']='٠۰൦෦𑥐𖭐'                                                             # "0"
['0031']='١۱१১੧૧୧௧౧౼೧൧෧๑໑༡၁፩១᠑᥇᧑᧚᪁᪑᭑᮱᱁᱑꘡꣑꤁꧑꧱꩑꯱𐋡𐒡𐩀𐹠𑁧𑃱𑄷𑇑𑇡𑋱𑑑𑓑𑙑𑛁𑜱𑥑𑱑𑵑𑶡𖩡𖭑𝍠𝍩🯱'       # "1"
['0032']='٢۲ݳݵݸݺ߂२২੨୨௨౨౺೨൨෨๒໒၂႒፪២᠒᥈᧒᪂᪒᭒᮲᱂᱒↊꘢꣒꤂꧒꧲꩒꯲𐋢𐒢𐩁𐴲𐹡𑁨𑃲𑇒𑇢𑛂𑜲𑥒𑱒𑵒𑶢𖩢𖭒𝍡𝍪𞅂𞋲𞣈'     # "2"
['0033']='٣۳ݴݶݹݻ߃৩୩௩౻౾೩൩෩๓໓༣၃႓፫៣᠓᥉᧓᪃᪓᭓᮳᱓↋꘣꤃꧓꩓꯳𐋣𐒣𐩂𐴳𐹢𑃳𑄹𑇣𑜳𑥓𑵓𑶣𖩣𖭓𝍢𝍫𞅃𞋳𞣉'            # "3"
['0034']='٤۴ݷݼݽ߄४৪੪૪୪௪౪೪൪෪๔໔༤၄႔፬៤᠔᥊᧔᪄᪔᭔᮴᱄᱔꘤꣔꤄꧔꧴꩔꯴𐋤𐒤𐩃𐴴𐹣𑁪𑃴𑄺𑇔𑇤𑋴𑑔𑓔𑙔𑛄𑜴𑥔𑱔𑵔𑶤𖩤𖭔𝍣𝍬𞅄𞋴𞣊' # "4"
['0035']='٥۵߅५৫੫૫୫௫౫೫൫෫๕໕༥၅႕፭៥᠕᥋᧕᪅᪕᭕᮵᱅᱕꘥꣕꤅꧕꧵꩕꯵𐋥𐒥𐴵𐹤𑁫𑃵𑄻𑇕𑇥𑋵𑑕𑓕𑙕𑛅𑜵𑥕𑱕𑵕𑶥𖩥𖭕𝍤𝍭𞅅𞋵𞣋'     # "5"
['0036']='٦۶߆६৬੬૬୬௬౬೬൬෬๖໖༦၆႖፮៦᠖᥌᧖᪆᪖᭖᮶᱆᱖꘦꣖꤆꧖꧶꩖꯶𐋦𐒦𐴶𐹥𑁬𑃶𑄼𑇖𑇦𑋶𑑖𑓖𑙖𑛆𑜶𑥖𑱖𑵖𑶦𖩦𖭖𝍥𝍮𞅆𞋶𞣌'     # "6"
['0037']='٧۷߇७৭੭૭୭௭౭೭൭෭๗໗༧၇႗፯៧᠗᥍᧗᪇᪗᭗᮷᱇᱗꘧꣗꤇꧗꧷꩗꯷𐋧𐒧𐴷𐹦𑁭𑃷𑄽𑇗𑇧𑋷𑑗𑓗𑙗𑛇𑜷𑥗𑱗𑵗𑶧𖩧𖭗𝍦𝍯𞅇𞋷𞣍'     # "7"
['0038']='٨۸߈८৮੮૮୮௮౮೮൮෮๘໘༨၈႘፰៨᠘᥎᧘᪈᪘᭘᮸᱈᱘꘨꣘꤈꧘꧸꩘꯸𐋨𐒨𐴸𐹧𑁮𑃸𑄾𑇘𑇨𑋸𑑘𑓘𑙘𑛈𑜸𑥘𑱘𑵘𑶨𖩨𖭘𝍧𝍰𞅈𞋸𞣎'     # "8"
['0039']='߉९৯੯૯୯௯౯೯൯෯๙໙༩၉႙፱៩᠙᥏᧙᪉᪙᭙᮹᱉᱙꘩꣙꤉꧙꧹꩙꯹ 𐋩𐒩𐴹𐹨𑃹𑄿𑇙𑇩𑋹𑑙𑓙𑙙𑛉𑜹𑥙𑱙𑵙𑶩𖩩𖭙𝍨𝍱𞅉𞋹𞣏'       # "9"
['003A']='܅܆܇₡≔≕꛴𒑲𝪊'  # ":"
['003B']='፤꛶𝪉'        # ";"
['003C']=''           # "<"
['003D']=''           # "="
['003E']=''           # ">"
['003F']=';՞፧⩻⩼⳺⳻꘏꛷𑅃' # "?"
['0040']=''           # "@"
['0041']='ÆǢ'         # "A"
['0042']=''           # "B"
['0043']=''           # "C"
['0044']='ǄǅǲƋ'       # "D"
['0045']=''           # "E"
['0046']=''           # "F"
['0047']=''           # "G"
['0048']='Һ𐐐'         # "H"
['0049']='ĲЍИӢӤ'      # "I"
['004A']=''           # "J"
['004B']=''           # "K"
['004C']='Ǉǈ'         # "L"
['004D']=''           # "M"
['004E']='ǊǋȠ'        # "N"
['004F']='ŒҨ'         # "O"
['0050']='Ꝕ'          # "P"
['0051']=''           # "Q"
['0052']=''           # "R"
['0053']=''           # "S"
['0054']=''           # "T"
['0055']='УӮӰӲ'       # "U"
['0056']='Ʋ'          # "V"
['0057']=''           # "W"
['0058']=''           # "X"
['0059']=''           # "Y"
['005A']=''           # "Z"
['005B']='⎢﹇'        # "["
['005C']='⟈'          # "\"
['005D']='⎥﹈'        # "]"
['005E']='⨣⨶⩯'        # "^"
['005F']='︳︴𛲖'      # "_"
['0060']='ˎ˵Ѷѷ'$'\U300\U316\U1dc0\U0953' # "`"
['0061']='æǣꬱꭰ'       # "a"
['0062']=''           # "b"
['0063']='ɕͨᷗ'          # "c"
['0064']='ǆʣʤʥͩ'       # "d"
['0065']='ꭱ'          # "e"
['0066']=''           # "f"
['0067']=''           # "g"
['0068']='𐐸ƕ'         # "h"
['0069']='ĳиѝӣӥꭲ'     # "i"
['006A']='ǈǋ'         # "j"
['006B']=''           # "k"
['006C']='ǉɮ'         # "l"
['006D']=''           # "m"
['006E']='ǌ'          # "n"
['006F']='œҩꭳ'        # "o"
['0070']='ꝕ'          # "p"
['0071']=''           # "q"
['0072']=''           # "r"
['0073']=''           # "s"
['0074']='ʦʧʨ'        # "t"
['0075']='уӯӱӳ'       # "u"
['0076']='ʋ'          # "v"
['0077']=''           # "w"
['0078']=''           # "x"
['0079']=''           # "y"
['007A']='ǅǲ'         # "z"
['007B']='︷⎧⎩⎱'      # "{"
['007C']='ˈˌ'         # "|"
['007D']='⎫⎭⎰︸'      # "}"
['007E']='ÃÑÕãñõĨĩŨũƟȬȭɫᵬᵭᵮᵯᵰᵱᵲᵳᵴᵵᵶḚḛḬḭṌṍṎṏṴṵṸṹṼṽẪẫẴẵẼẽỄễỖỗỠỡỮữỸỹ⍫⍭⍱⍲⥲⥳⥴⧤⨤⨦⫇⫈⫳⭁⭇⭉⭋⭌Ɫⸯꬸꭞꭨ' # "~"
) # }}}
declare -A except_include=( # {{{
# These are exceptions that DON'T pass the name patterns but DO look like the ASCII characters.
# They are added to the list of look-alikes.
['0020']='' # " "
['0021']='' # "!"
['0022']='❝❞“”‟🙶🙷' # """
['0023']='' # "#"
['0024']='' # "$"
['0025']='' # "%"
['0026']='' # ampersand
['0027']='ʻʽ‘’❛❜︐' # "'"
['0028']='' # "("
['0029']='' # ")"
['002A']='꘎' # "*"
['002B']='✢✣✤⨤⨦' # "+"
['002C']='' # ","
['002D']='' # "-"
['002E']='' # "."
['002F']='' # "/"
['0030']='𝟶🄁' # "0"
['0031']='𝟷🄂⒈' # "1"
['0032']='𝟸🄃⒉𑶤' # "2"
['0033']='𝟹🄄⒊᭔𖭕𐋧𑇘' # "3"
['0034']='𝟺🄅⒋Ꜯꜯ੫૫𑇕𑋵𑛅' # "4"
['0035']='𝟻🄆⒌' # "5"
['0036']='𝟼🄇⒍᱔꩔᱙𑵙' # "6"
['0037']='𝟽🄈⒎᮴' # "7"
['0038']='𝟾🄉⒏৪𞣋୫᥍႙' # "8"
['0039']='𝟿🄊⒐१੧૧𑙑୨𖩥𑄽𑛇𑱗𑵘' # "9"
['003A']='։' # ":"
['003B']='' # ";"
['003C']='' # "<"
['003D']='꓿⧤' # "="
['003E']='' # ">"
['003F']='𞋶' # "?"
['0040']='' # "@"
['0041']='𝙰٨۸᧘꣘ÃẪẴ⍲' # "A"
['0042']='𝙱𑵕' # "B"
['0043']='𝙲𖭖𐒨' # "C"
['0044']='𝙳' # "D"
['0045']='𝙴੬૬꣖𐋦𑋶𑑖𑙖𞅈૯౯៩ḚẼỄ' # "E"
['0046']='𝙵' # "F"
['0047']='𝙶' # "G"
['0048']='𝙷' # "H"
['0049']='𝙸ĨḬ' # "I"
['004A']='𝙹𐴶𑵗' # "J"
['004B']='𝙺𖭗𖭘𖭙' # "K"
['004C']='𝙻𑃸⎩Ɫ' # "L"
['004D']='𝙼' # "M"
['004E']='𝙽ЍИӢӤÑ' # "N"
['004F']='𝙾ÕȬṌṎỖỠ' # "O"
['0050']='𝙿୧𑃱' # "P"
['0051']='𝚀' # "Q"
['0052']='𝚁ꭱ' # "R"
['0053']='𝚂Ș' # "S"
['0054']='𝚃Ț꛵𝍮ꭲ' # "T"
['0055']='𝚄᮸𐒩ĲŨṴṸỮ' # "U"
['0056']='𝚅٧۷߇𞋷Ṽ⍱' # "V"
['0057']='𝚆' # "W"
['0058']='𝚇' # "X"
['0059']='𝚈Ỹ' # "Y"
['005A']='𝚉႗' # "Z"
['005B']='' # "["
['005C']='' # "\"
['005D']='' # "]"
['005E']='' # "^"
['005F']='' # "_"
['0060']='՝‛︑' # "`"
['0061']='𝚊ãẫẵ' # "a"
['0062']='𝚋᥇𑃵𐋨𑃹ᵬ' # "b"
['0063']='𝚌' # "c"
['0064']='𝚍𐹠𑶡𞣌ᵭ' # "d"
['0065']='𝚎𑄺𑙙ḛẽễ' # "e"
['0066']='𝚏𞣏ᵮ' # "f"
['0067']='𝚐' # "g"
['0068']='𝚑Һ' # "h"
['0069']='𝚒ĩḭ' # "i"
['006A']='𝚓' # "j"
['006B']='𝚔' # "k"
['006C']='𝚕ɫ' # "l"
['006D']='𝚖ᵯ' # "m"
['006E']='𝚗ŉñᵰ' # "n"
['006F']='𝚘õȭṍṏỗỡ' # "o"
['0070']='𝚙ᵱ' # "p"
['0071']='𝚚𐴹' # "q"
['0072']='𝚛ᵲᵳ' # "r"
['0073']='𝚜ș𑛈ᵴⸯ' # "s"
['0074']='𝚝țᵵ' # "t"
['0075']='𝚞иѝӣӥũṵṹữ' # "u"
['0076']='𝚟᱇᥎Ѷѷṽ' # "v"
['0077']='𝚠' # "w"
['0078']='𝚡᙮' # "x"
['0079']='𝚢꧶𐒦УӮӰӲуӯӱӳỹ' # "y"
['007A']='𝚣ᵶ' # "z"
['007B']='' # "{"
['007C']='⎜⎟𖭐꘡⎢⎥︳︴⍭' # "|"
['007D']='' # "}"
['007E']='' # "~"
) # }}}

generateEquivalents() { # {{{
    declare -A equivalents_esc
    declare -A equivalents_lit
    {
        if [[ ! -f "$dataLocation" ]];then # if the data file doesn't exist yet
            echo -e "The Unicode data file has not been downloaded yet.\nDownloading to $dataLocation" 
            mkdir -p "${dataLocation%/*}" # ensure the directory exists
            curl "$dataUrl" > "$dataLocation" # download the file
        fi
    } 1>&2 # send all this block's output to stderr
    echo Generating visually equivalent character list: "$equivFile" 1>&2
    {
        for key in "${!namePatterns[@]}";do
            # search the Unicode data for named-alike chars, exclude problem chars and stuff where name-alike != look-alike
            IFS=$'\n' matches=( $( \
                                    grep -e "${namePatterns[$key]}" ~/.local/share/UnicodeData.txt \
                                    | grep -v -e '^009D' -e '^009F' -e 'COMBINING' -e 'ZERO WIDTH' \
                                        -e 'MEDEFAIDRIN' -e 'ADLAM' -e 'WARANG' -e 'OLD HUNGARIAN' \
                                        -e 'OSAGE' -e 'GLAGOLITIC' -e 'CHEROKEE' \
                                ) ) # indexes from 0
            keyLit=$(printf '\U'"$key")
            len=${#matches[@]}
            for (( i=0; i<len; ++i ));do
                esc="${matches[$i]%%;*}" # remove everything except the escape
                lit="$(printf '\U'"$esc")"
                # if it's not one of the exclusionary exeptions and it's not the ASCII character
                if [[ ( ! "${except_exclude["$key"]}" =~ "$lit" ) && ( ! "$keyLit" == "$lit" ) ]];then
                    #equivalents_esc["$key"]+="$esc," # add it to the list of escaped equivalents
                    equivalents_lit["$key"]+="$lit" # add it to the list of literal equivalents
                fi
            done
            equivalents_lit["$key"]+="${except_include["$key"]}" # tack the includes on the end
            #echo -e "\e[32m--- key: $key literal: \U00$key ---\e[0m"
            # Put the ASCII character on the first column. The look-alikes come after.
            echo "$keyLit${equivalents_lit["$key"]}"
        done
    } > "$equivFile"
} # }}}
equivalizeChar() { # {{{
    local C="$1"
    if [[ ! "$asciiChars" =~ "$C" ]]; then # we don't have a visual equivalent
        echo -n "$C" # pass the character through unchanged
    fi
    cEquivs="${equivs["$C"]}"
    cEquivsLen="${#cEquivs}"
    j=$(( RANDOM % (cEquivsLen-1) )) # why are all the non-whitespace equivs have an empty character at the end?
    cEquiv="${cEquivs: $j:1}"
    #for (( k=0; k<cEquivsLen; ++k ));do
    #    echo "k: $k cEquivs[k]: \"${cEquivs: $k:1}\""
    #done
    #echo "C: $C cEquiv: $cEquiv cEquivs: $cEquivs j: $j cEquivsLen: $cEquivsLen"
    echo -n "$cEquiv"
} # }}}

# main program flow {{{
while getopts 'gh' name; do # process option flags
    case $name in
        g) generateEquivalents;;
        h) echo "$helpText" && exit 1;;
    esac
done

if shift $(( $OPTIND - 1 )); then # shift to the first non-option arg; if there are arguments after the options
    while [[ $? == 0 ]]; do # while the previous exit status (shift) is good
        [[ "$1" ]] && input+="$1 "
        shift
    done
fi
if [[ -z "$input" ]];then
    usestdin=true
    input=${input: 0:-1} # snip off that trailing space
else
    usestdin=false # if there was no input, use stdin
fi

if [[ ! -f "$equivFile" ]];then
    echo "$equivFile does not exist. It will be [re]generated."
    generateEquivalents
fi

declare -A equivs
while IFS='' read -rd $'\n' line; do # read in the pre-processed look-alikes
    leading=${line: 0:1} # the first character
    trailing=${line: 1} # everything but the first (index 0) character
    equivs["$leading"]="$trailing" # use the leading char as the key
done < "$equivFile"
asciiChars="${!equivs[*]}"

# Translate ASCII characters into Unicode look-alikes
if [[ "$usestdin" == true ]]; then
    while IFS='' read -rN1 C; do # convert characters coming from stdin
        equivalizeChar "$C"
    done
else
    nchar=${#input}
    for (( i=0; i<nchar; ++i )); do # convert chars given as arguments
        equivalizeChar "${input: $i:1}" # select the ith character from the input
    done
    echo
fi
# }}}
exit 0
