#!/bin/bash
# A tool for managing notes and personal TODOs written in markdown
# Joe Shields
# 2017-12-17

# exit codes:
# -1:	command not found
# 0:	normal operation
# 1:	
# 2:	couldn't find weekly directory
# 3:	no notes in weekly directory

# abort if you get errors
set -e

# TODO: read a config file instead of hard-coding these parameters
# direct parameters:
weeklyDir=~/notes/weekly
rolloverDay=friday
noteEditor=$EDITOR

# inferred parameters:
lastRollover=`date --date "last $rolloverDay" +"%Y-%m-%d.md"`

# other initializations
mostRecent='' # name of the most recent note
answer=''


function note-help() {
# Short explanations of the command and its subcommands
	echo usage: \t note '<command> [FILE]'
	echo
	echo manage markdown notes with awareness of checklists
	echo FILE defaults to the latest notes, as determined by '`sort -nr`'
	echo
	echo COMMANDS:
	echo -e 'count \t\t count completed/uncompleted tasks (checkboxes)'
	echo -e 'update \t\t open the notes in your text editor'
	echo -e 'rollover \t copy the notes into a new page for this week, removing completed tasks'
	echo -e 'list \t\t list the section headings and first words of unchecked items'
	echo -e 'init \t\t setup the '
	echo -e 'help \t\t display this help message'
}


function note-count() {
# count the done/todo action items for the latest week
	# see if there're notes from the last rollover day or sooner
	if [ $mostRecent != $lastRollover ] && [ ! check ]
	then
		echo It looks like your notes are more than a week old.
		echo You may want to run this with the -r \(rollover\) flag.
	fi
	unfinished=`cat $1 | grep '\[\ \]' | wc -l`
	finished=`cat $1 | grep '\[X\]' | wc -l`
	echo For the notes in $1:
	echo $finished down, $unfinished to go
}
function note-update() {
	if [ -f $1 ]
	then
		$noteEditor $1
	else
		echo Couldn\'t find $1.
	fi
}

function note-rollover() {
# copy over everything except for the checked-off action items
# copy from $1 to the weekly rollover 
# avoid clobbering
	targ=$weeklyDir/$lastRollover
	if [ ! -f $targ ]
	then
		echo Copying unresolved lines from $1 into $targ...
		echo automatically rolled over on `date` >> $targ
		grep -v '\[X\]' $1 >> $targ
	else
		echo $targ already exists.
		echo Rolling over into $targ would probably delete info.
		echo I won\'t do it!
	fi
}


function getLatestNote() {
	mostRecent=`ls $weeklyDir | sort -nr | head -n 1`
	echo $mostRecent
}

function note-list() {
# show the section headings and the first word of every unchecked action item
	echo For the notes in $1:
	# match {unchecked items} or {(non-primary) headings}
		# replace {check boxes} wih {tabs}
		# select only {the first words of action items} or {headings}
		# punctuation is allowed at the head of the word to allow for annotation
	grep -e '^-\ \[\ \]\|##*' $1 \
		| sed -e 's/-\ \[\ \]\ /\t/' \
		| grep -oe '^\s*[[:punct:]]*\s*\w*\|##*.*'
}

# TODO: make this pre-check section not break the tool when used on things not
# using the weekly directory

#### check for directory ####
# echo checking for the existence of the weekly directoy
answer=''
if [ ! -d $weeklyDir ]
then
	read -n 1 -p "Couldn't find $weeklyDir. Create it? [y/N]" answer
	if [ $answer = y ]
	then
		echo Creating $weeklyDir...
		mkdir -p $weeklyDir
	else
		echo -e Well, I can\'t do much with no directory to work in.
		exit 2
	fi
fi

#### check for notes ####
# echo checking for the existence of notes
answer=''
if [ -z "`ls $weeklyDir`" ]
then
	# catch if getLatestNote fails
	read -n 1 -p "Couldn't find a note. Create one? [y/N]" answer
	if [ $answer = y ]
	then
		touch $weeklyDir/$lastRollover
	else
		echo -e Well, I can\'t do much without any notes.
		exit 3
	fi
fi

# echo about to assign mostRecent
# echo assigning a value of `getLatestNote`
mostRecent=`getLatestNote`


if [ $# -lt 2 ]
then
	targetNote=$mostRecent
	targ=$weeklyDir/$targetNote
else
	targ=$1
fi

#### parse subcommands ####
# read through each sbcommand given
case $1 in
	count) note-count $targ ;;
	update) note-update $targ ;;
	rollover) note-rollover $targ ;;
	init)	echo init command placeholder ;;
	list)	note-list $targ ;;
	help)	note-help ;;
	*)		
		echo note: \'$1\' is not a command
		note-help
		exit -l
		;;
esac
